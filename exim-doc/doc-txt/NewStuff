$Cambridge: exim/exim-doc/doc-txt/NewStuff,v 1.133 2007/01/31 11:30:08 ph10 Exp $

New Features in Exim
--------------------

This file contains descriptions of new features that have been added to Exim.
Before a formal release, there may be quite a lot of detail so that people can
test from the snapshots or the CVS before the documentation is updated. Once
the documentation is updated, this file is reduced to a short list.

Version 4.67
------------

 1. There is a new log selector called smtp_no_mail, which is not included in
    the default setting. When it is set, a line is written to the main log
    whenever an accepted SMTP connection terminates without having issued a
    MAIL command. This includes both the case when the connection is dropped,
    and the case when QUIT is used. Note that it does not include cases where
    the connection is rejected right at the start (by an ACL, or because there
    are too many connections, or whatever). These cases already have their own
    log lines.

    The log line that is written contains the identity of the client in the
    usual way, followed by D= and a time, which records the duration of the
    connection. If the connection was authenticated, this fact is logged
    exactly as it is for an incoming message, with an A= item. If the
    connection was encrypted, CV=, DN=, and X= items may appear as they do for
    an incoming message, controlled by the same logging options.

    Finally, if any SMTP commands were issued during the connection, a C= item
    is added to the line, listing the commands that were used. For example,

      C=EHLO,QUIT

    shows that the client issued QUIT straight after EHLO. If there were fewer
    than 20 commands, they are all listed. If there were more than 20 commands,
    the last 20 are listed, preceded by "...". However, with the default
    setting of 10 for smtp_accep_max_nonmail, the connection will in any case
    be aborted before 20 non-mail commands are processed.

 2. When an item in a dnslists list is followed by = and & and a list of IP
    addresses, in order to restrict the match to specific results from the DNS
    lookup, the behaviour was not clear when the lookup returned more than one
    IP address. For example, consider the condition

      dnslists = a.b.c=127.0.0.1

    What happens if the DNS lookup for the incoming IP address yields both
    127.0.0.1 and 127.0.0.2 by means of two separate DNS records? Is the
    condition true because at least one given value was found, or is it false
    because at least one of the found values was not listed? And how does this
    affect negated conditions?

    The behaviour of = and & has not been changed; however, the text below
    documents it more clearly. In addition, two new additional conditions (==
    and =&) have been added, to permit the "other" behaviour to be configured.

    A DNS lookup may yield more than one record. Thus, the result of the lookup
    for a dnslists check may yield more than one IP address. The question then
    arises as to whether all the looked up addresses must be listed, or whether
    just one is good enough. Both possibilities are provided for:

    . If = or & is used, the condition is true if any one of the looked up
      IP addresses matches one of the listed addresses. Consider:

        dnslists = a.b.c=127.0.0.1

      If the DNS lookup yields both 127.0.0.1 and 127.0.0.2, the condition is
      true because 127.0.0.1 matches.

    . If == or =& is used, the condition is true only if every one of the
      looked up IP addresses matches one of the listed addresses. Consider:

        dnslists = a.b.c==127.0.0.1

      If the DNS lookup yields both 127.0.0.1 and 127.0.0.2, the condition is
      false because 127.0.0.2 is not listed. You would need to have

        dnslists = a.b.c==127.0.0.1,127.0.0.2

      for the condition to be true.

    When ! is used to negate IP address matching, it inverts the result, giving
    the precise opposite of the behaviour above. Thus:

    . If != or !& is used, the condition is true if none of the looked up IP
      addresses matches one of the listed addresses. Consider:

        dnslists = a.b.c!&0.0.0.1

      If the DNS lookup yields both 127.0.0.1 and 127.0.0.2, the condition is
      false because 127.0.0.1 matches.

    . If !== or !=& is used, the condition is true there is at least one looked
      up IP address that does not match. Consider:

        dnslists = a.b.c!=&0.0.0.1

      If the DNS lookup yields both 127.0.0.1 and 127.0.0.2, the condition is
      true, because 127.0.0.2 does not match. You would need to have

        dnslists = a.b.c!=&0.0.0.1,0.0.0.2

      for the condition to be false.

    When the DNS lookup yields only a single IP address, there is no difference
    between = and == and between & and =&.

 3. Up till now, the only control over which cipher suites GnuTLS uses has been
    for the cipher algorithms. New options have been added to allow some of the
    other parameters to be varied. Here is complete documentation for the
    available features:

    GnuTLS allows the caller to specify separate lists of permitted key
    exchange methods, main cipher algorithms, and MAC algorithms. These may be
    used in any combination to form a specific cipher suite. This is unlike
    OpenSSL, where complete cipher names can be passed to its control function.
    GnuTLS also allows a list of acceptable protocols to be supplied.

    For compatibility with OpenSSL, the tls_require_ciphers option can be set
    to complete cipher suite names such as RSA_ARCFOUR_SHA, but for GnuTLS this
    option controls only the cipher algorithms. Exim searches each item in the
    list for the name of an available algorithm. For example, if the list
    contains RSA_AES_SHA, then AES is recognized, and the behaviour is exactly
    the same as if just AES were given.

    There are additional options called gnutls_require_kx, gnutls_require_mac,
    and gnutls_require_protocols that can be used to restrict the key exchange
    methods, MAC algorithms, and protocols, respectively. These options are
    ignored if OpenSSL is in use.

    All four options are available as global options, controlling how Exim
    behaves as a server, and also as options of the smtp transport, controlling
    how Exim behaves as a client. All the values are string expanded. After
    expansion, the values must be colon-separated lists, though the separator
    can be changed in the usual way.

    Each of the four lists starts out with a default set of algorithms. If the
    first item in one of the "require" options does _not_ start with an
    exclamation mark, all the default items are deleted. In this case, only
    those that are explicitly specified can be used. If the first item in one
    of the "require" items _does_ start with an exclamation mark, the defaults
    are left on the list.

    Then, any item that starts with an exclamation mark causes the relevant
    entry to be removed from the list, and any item that does not start with an
    exclamation mark causes a new entry to be added to the list. Unrecognized
    items in the list are ignored. Thus:

      tls_require_ciphers = !ARCFOUR

    allows all the defaults except ARCFOUR, whereas

      tls_require_ciphers = AES : 3DES

    allows only cipher suites that use AES or 3DES. For tls_require_ciphers
    the recognized names are AES_256, AES_128, AES (both of the preceding),
    3DES, ARCFOUR_128, ARCFOUR_40, and ARCFOUR (both of the preceding). The
    default list does not contain all of these; it just has AES_256, AES_128,
    3DES, and ARCFOUR_128.

    For gnutls_require_kx, the recognized names are DHE_RSA, RSA (which
    includes DHE_RSA), DHE_DSS, and DHE (which includes both DHE_RSA and
    DHE_DSS). The default list contains RSA, DHE_DSS, DHE_RSA.

    For gnutls_require_mac, the recognized names are SHA (synonym SHA1), and
    MD5. The default list contains SHA, MD5.

    For gnutls_require_protocols, the recognized names are TLS1 and SSL3.
    The default list contains TLS1, SSL3.

    In a server, the order of items in these lists is unimportant. The server
    will advertise the availability of all the relevant cipher suites. However,
    in a client, the order in the tls_require_ciphers list specifies a
    preference order for the cipher algorithms. The first one in the client's
    list that is also advertised by the server is tried first.

 4. There is a new compile-time option called ENABLE_DISABLE_FSYNC. You must
    not set this option unless you really, really, really understand what you
    are doing. No pre-compiled distributions of Exim should ever set this
    option. When it is set, Exim compiles a runtime option called
    disable_fsync. If this is set true, Exim no longer calls fsync() to force
    updated files' data to be written to disc. Unexpected events such as
    crashes and power outages may cause data to be lost or scrambled. Beware.

    When ENABLE_DISABLE_FSYNC is not set, a reference to disable_fsync in a
    runtime configuration generates an "unknown option" error.

 5. There is a new variable called $smtp_count_at_connection_start. The name
    is deliberately long, in order to emphasize what the contents are. This
    variable is set greater than zero only in processes spawned by the Exim
    daemon for handling incoming SMTP connections. When the daemon accepts a
    new connection, it increments this variable. A copy of the variable is
    passed to the child process that handles the connection, but its value is
    fixed, and never changes. It is only an approximation of how many incoming
    connections there actually are, because many other connections may come and
    go while a single connection is being processed. When a child process
    terminates, the daemon decrements the variable.

 6. There's a new control called no_pipelining, which does what its name
    suggests. It turns off the advertising of the PIPELINING extension to SMTP.
    To be useful, this control must be obeyed before Exim sends its response to
    an EHLO command. Therefore, it should normally appear in an ACL controlled
    by acl_smtp_connect or acl_smtp_helo.

 7. There are two new variables called $sending_ip_address and $sending_port.
    These are set whenever an SMTP connection to another host has been set up,
    and they contain the IP address and port of the local interface that is
    being used. They are of interest only on hosts that have more than on IP
    address that want to take on different personalities depending on which one
    is being used.

 8. The expansion of the helo_data option in the smtp transport now happens
    after the connection to the server has been made. This means that it can
    use the value of $sending_ip_address (see 7 above) to vary the text of the
    message. For example, if you want the string that is used for helo_data to
    be obtained by a DNS lookup of the interface address, you could use this:

      helo_data = ${lookup dnsdb{ptr=$sending_ip_address}{$value}\
        {$primary_hostname}}

    The use of helo_data applies both to sending messages and when doing
    callouts.

 9. There is a new expansion operator ${rfc2047d: that decodes strings that
    are encoded as per RFC 2047. Binary zero bytes are replaced by question
    marks. Characters are converted into the character set defined by
    headers_charset. Overlong RFC 2047 "words" are not recognized unless
    check_rfc2047_length is set false.


Version 4.66
------------

No new features were added to 4.66.


Version 4.65
------------

No new features were added to 4.65.


Version 4.64
------------

 1. ACL variables can now be given arbitrary names, as long as they start with
    "acl_c" or "acl_m" (for connection variables and message variables), are at
    least six characters long, with the sixth character being either a digit or
    an underscore.

 2. There is a new ACL modifier called log_reject_target. It makes it possible
    to specify which logs are used for messages about ACL rejections.

 3. There is a new authenticator called "dovecot". This is an interface to the
    authentication facility of the Dovecot POP/IMAP server, which can support a
    number of authentication methods.

 4. The variable $message_headers_raw provides a concatenation of all the
    messages's headers without any decoding. This is in contrast to
    $message_headers, which does RFC2047 decoding on the header contents.

 5. In a DNS black list, if two domain names, comma-separated, are given, the
    second is used first to do an initial check, making use of any IP value
    restrictions that are set. If there is a match, the first domain is used,
    without any IP value restrictions, to get the TXT record.

 6. All authenticators now have a server_condition option.

 7. There is a new command-line option called -Mset. It is useful only in
    conjunction with -be (that is, when testing string expansions). It must be
    followed by a message id; Exim loads the given message from its spool
    before doing the expansions.

 8. Another similar new command-line option is called -bem. It operates like
    -be except that it must be followed by the name of a file that contains a
    message.

 9. When an address is delayed because of a 4xx response to a RCPT command, it
    is now the combination of sender and recipient that is delayed in
    subsequent queue runs until its retry time is reached.

10. Unary negation and the bitwise logical operators and, or, xor, not, and
    shift, have been added to the eval: and eval10: expansion items.

11. The variables $interface_address and $interface_port have been renamed
    as $received_ip_address and $received_port, to make it clear that they
    relate to message reception rather than delivery. (The old names remain
    available for compatibility.)

12. The "message" modifier can now be used on "accept" and "discard" acl verbs
    to vary the message that is sent when an SMTP command is accepted.


Version 4.63
------------

1. There is a new Boolean option called filter_prepend_home for the redirect
   router.

2. There is a new acl, set by acl_not_smtp_start, which is run right at the
   start of receiving a non-SMTP message, before any of the message has been
   read.

3. When an SMTP error message is specified in a "message" modifier in an ACL,
   or in a :fail: or :defer: message in a redirect router, Exim now checks the
   start of the message for an SMTP error code.

4. There is a new parameter for LDAP lookups called "referrals", which takes
   one of the settings "follow" (the default) or "nofollow".

5. Version 20070721.2 of exipick now included, offering these new options:
    --reverse
        After all other sorting options have bee processed, reverse order
        before displaying messages (-R is synonym).
    --random
        Randomize order of matching messages before displaying.
    --size
        Instead of displaying the matching messages, display the sum
        of their sizes.
    --sort <variable>[,<variable>...]
        Before displaying matching messages, sort the messages according to
        each messages value for each variable.
    --not
        Negate the value for every test (returns inverse output from the
        same criteria without --not).


Version 4.62
------------

1. The ${readsocket expansion item now supports Internet domain sockets as well
   as Unix domain sockets. If the first argument begins "inet:", it must be of
   the form "inet:host:port". The port is mandatory; it may be a number or the
   name of a TCP port in /etc/services. The host may be a name, or it may be an
   IP address. An ip address may optionally be enclosed in square brackets.
   This is best for IPv6 addresses. For example:

     ${readsocket{inet:[::1]:1234}{<request data>}...

   Only a single host name may be given, but if looking it up yield more than
   one IP address, they are each tried in turn until a connection is made. Once
   a connection has been made, the behaviour is as for ${readsocket with a Unix
   domain socket.

2. If a redirect router sets up file or pipe deliveries for more than one
   incoming address, and the relevant transport has batch_max set greater than
   one, a batch delivery now occurs.

3. The appendfile transport has a new option called maildirfolder_create_regex.
   Its value is a regular expression. For a maildir delivery, this is matched
   against the maildir directory; if it matches, Exim ensures that a
   maildirfolder file is created alongside the new, cur, and tmp directories.


Version 4.61
------------

The documentation is up-to-date for the 4.61 release. Major new features since
the 4.60 release are:

. An option called disable_ipv6, to disable the use of IPv6 completely.

. An increase in the number of ACL variables to 20 of each type.

. A change to use $auth1, $auth2, and $auth3 in authenticators instead of $1,
  $2, $3, (though those are still set) because the numeric variables get used
  for other things in complicated expansions.

. The default for rfc1413_query_timeout has been changed from 30s to 5s.

. It is possible to use setclassresources() on some BSD OS to control the
  resources used in pipe deliveries.

. A new ACL modifier called add_header, which can be used with any verb.

. More errors are detectable in retry rules.

There are a number of other additions too.


Version 4.60
------------

The documentation is up-to-date for the 4.60 release. Major new features since
the 4.50 release are:

. Support for SQLite.

. Support for IGNOREQUOTA in LMTP.

. Extensions to the "submission mode" features.

. Support for Client SMTP Authorization (CSA).

. Support for ratelimiting hosts and users.

. New expansion items to help with the BATV "prvs" scheme.

. A "match_ip" condition, that matches an IP address against a list.

There are many more minor changes.

****
